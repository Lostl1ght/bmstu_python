# Программа для вычисления параметров треугольника.
# Буланый Константин
# ИУ7-16Б

from math import sqrt, fabs

# Ввод координат точек.
x1, y1 = (int(i) for i in input("Введите х и у первой точки в одной строке: ").split())
x2, y2 = (int(i) for i in input("Введите х и у второй точки в одной строке: ").split())
x3, y3 = (int(i) for i in input("Введите х и у третьей точки в одной строке: ").split())
print()

# Длины сторон находятся через длины векторов,
# соответствующих этим сторонам.
# Координаты векторов, соответствующих сторонам.

# Первая половина списков для координат векторов сторон,
# а вторая для координат векторов, лежащих на прямых, образованных
# четвертой точкой и вершинами треугольника.
x_v = [0] * 6
y_v = [0] * 6
# Вектор, соответствующий первой стороне.
x_v[0] = x2 - x1
y_v[0] = y2 - y1
# Вектор, соответствующий второй стороне.
x_v[1] = x3 - x2
y_v[1] = y3 - y2
# Вектор, соответствующий третьей стороне.
x_v[2] = x1 - x3
y_v[2] = y1 - y3

# Длины сторон.
len_v = [0.0] * 3
len_v[0] = sqrt(x_v[0] * x_v[0] + y_v[0] * y_v[0])
len_v[1] = sqrt(x_v[1] * x_v[1] + y_v[1] * y_v[1])
len_v[2] = sqrt(x_v[2] * x_v[2] + y_v[2] * y_v[2])

# Наиюольший угол - против наибольшей стороны.
# Поиск наибольшей длины.
max_len = len_v[0]
i_max_len = 0
if len_v[1] > max_len:
    max_len = len_v[1]
    i_max_len = 1
if len_v[2] > max_len:
    max_len = len_v[2]
    i_max_len = 2

# Список индексов сторон, кроме самой длинной
s_ind = [0, 1, 2]
s_ind.remove(i_max_len)

# Проверка треугольника на вырожденность.
# Если сумма меньших сторон равна большей стороне, то треугоьник вырожденный.
if fabs(max_len - (len_v[s_ind[0]] + len_v[s_ind[1]])) < 1e-8:
    print("Это вырожденный треугольник.")
else:
    # Вывод длин сторон.
    print("Длина первой стороны: {:.3}.".format(len_v[0]))
    print("Длина второй стороны: {:.3}.".format(len_v[1]))
    print("Длина третьей стороны: {:.3}.".format(len_v[2]), end="\n\n")

    # Площадь треугольника через векторное произведение.
    s = fabs((x_v[s_ind[0]] * y_v[s_ind[1]] - x_v[s_ind[1]] * y_v[s_ind[0]]) / 2)

    # Длина высоты.
    height = 2 * s / max_len

    # Вывод длины выстоны
    print("Длина выстолы, опущенной из наибольшего угла: {:.3}.".format(height), end="\n\n")

    # Ввод координат четвертой точки.
    x4, y4 = (int(i) for i in input("Введите х и у четвертой точки в одной строке: ").split())
    print()

    # Если сумма площадей треугольников, образованных четвертой точкой и
    # каждой стороной равна площади главного треугольника, то точка
    # лежит внутри него.

    # Расчет площадей треугольников так же через векторное произведение.
    # Координаты вектора четвертой точки для первой стороны.
    x_v[3] = x4 - x1
    y_v[3] = y4 - y1
    # Координаты вектора четвертой точки для второй стороны.
    x_v[4] = x4 - x2
    y_v[4] = y4 - y2
    # Координаты вектора четвертой точки для третьей стороны.
    x_v[5] = x4 - x3
    y_v[5] = y4 - y3
    # Площади треугольников.
    s1 = fabs((x_v[3] * y_v[0] - y_v[3] * x_v[0]) / 2)
    s2 = fabs((x_v[4] * y_v[1] - y_v[4] * x_v[1]) / 2)
    s3 = fabs((x_v[5] * y_v[2] - y_v[5] * x_v[2]) / 2)

    # Ищем, у какого треугольника наибольшая высота: расстояние до
    # наиболее удаленно стороны.
    if fabs(s - (s1 + s2 + s3)) < 1e-8:
        height1 = 2 * s1 / len_v[0]
        height2 = 2 * s2 / len_v[1]
        height3 = 2 * s3 / len_v[2]
        max_height = height1
        if height2 > max_height:
            max_height = height2
        if height3 > max_height:
            max_height = height3
        print("Точка лежит внутри треугольника.")
        print("Расстояние от этой точки до наиболее удаленной стороны: {:.3}.".format(max_height), end="\n\n")
    else:
        print("Точка лежит вне треугольника.")

    # Если две стороны равны, то треугольник равнобедренный.
    if fabs(len_v[0] - len_v[1]) < 1e-8 or fabs(len_v[0] - len_v[2]) < 1e-8 or fabs(len_v[1] - len_v[2]) < 1e-8:
        print("Это равнобедренный теугольник.")
    else:
        print("Это не равнобедренный треугольник")
